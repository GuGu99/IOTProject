#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('iotserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// DB ����
var mongoDB = require("mongodb").MongoClient; // ����� �������� MongoClient ��ü ����
var url = "mongodb://127.0.0.1:27017/gsmiot";
var dbObj = null;
mongoDB.connect(url, function(err, db){
	dbObj = db;
	console.log("DB Connected.");
});


/**
 * Listen on provided port, on all network interfaces.
 */
var mqtt = require("mqtt");	
var client = mqtt.connect("mqtt://192.168.0.10");

client.on("connect", function(){ 
	console.log("mqtt server connection...");
	client.subscribe("dht11");
}); // ���� �Ǿ����� �̺�Ʈ �ɱ�

client.on("message", function(topic, msg){
	if (topic == "dht11"){
		console.log(msg.toString()); // ��ü�� �Ѿ���Ƿ� ��Ʈ������ ��ȯ
		// db insert
		var obj = JSON.parse(msg); // text->object
		obj.created_at = new Date(); // created_at�� ������ �ڵ����� �����Ѵ�.
		console.log(obj); // obj print
		
		// ���̺� ���� DB�� �ֱ�
		var dht11 = dbObj.collection("dht11"); // ���̺� �����
		dht11.save(obj, function(err, result){
			if (err) console.log(err);
			else console.log(JSON.stringify(result));
		})
		
		/*
		var dht11 = dbObj.collection("dht11"); // DB ����
		dht11.save(obj, function(err, result){
			Console.log(JSON.stringfy(result)); // { ok : 1 }
		});
		*/
	}
})
// --MongoDB--> | Node.js<--socket-->HTML(javascript) |<--- Internet Explorer, Android(����͸�)
var io = require('socket.io')(server);
io.on("connection", function(socket){ // ����. ���� ����
	console.log("web connetcion...");
	socket.on("socket_evt_mqtt", function(data){ // �̺�Ʈ �ޱ�
		var dht11 = dbObj.collection("dht11"); // ���̺� �����(������ �׳� ������)
		dht11.find({}).sort({_id:-1}).limit(1).toArray(function(err, results){
			if (!err){
				socket.emit("socket_evt_mqtt", JSON.stringify(results[0])); // �̺�Ʈ ������
			}
		});
	});
	
	socket.on("socket_evt_led", function(data){
		var obj = JSON.parse(data);
		// console.log(obj);
		client.publish("led", obj.led+'');
	});
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
